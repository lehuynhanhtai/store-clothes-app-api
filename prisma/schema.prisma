generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int     @id @default(autoincrement())
  account            String  @unique
  googleId           String? @unique
  firstName          String
  lastName           String
  password           String? // Nullable for OAuth users
  hashedRefreshToken String?
  role               Role    @default(CUSTOMER)

  orders    Order[]
  addresses Address[]
  favorites Favorite[]
  reviews   Review[]
  cart      CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([account])
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String?  @db.Text
  images        String[] // Multiple images
  price         Decimal  @default(0) @db.Decimal(10, 2)
  salePrice     Decimal? @db.Decimal(10, 2) // Discounted price
  sku           String   @unique // Stock Keeping Unit
  stockQuantity Int      @default(0)
  color         String?
  size          String[] // Available sizes
  material      String?
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int
  brand         Brand?   @relation(fields: [brandId], references: [id])
  brandId       Int?
  isFeatured    Boolean  @default(false)
  isActive      Boolean  @default(true)
  ratings       Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
  favorites  Favorite[]
  cartItems  CartItem[]

  @@index([categoryId])
  @@index([brandId])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?    @db.Text
  image       String?
  products    Product[]
  parentId    Int?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")

  @@index([parentId])
}

model Brand {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?   @db.Text
  logo        String?
  products    Product[]
}

model Order {
  id                String        @id @default(uuid())
  orderNumber       String        @unique // Human-readable order number
  totalAmount       Decimal       @db.Decimal(10, 2)
  taxAmount         Decimal       @default(0) @db.Decimal(10, 2)
  shippingFee       Decimal       @default(0) @db.Decimal(10, 2)
  status            OrderStatus   @default(PENDING)
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus @default(PENDING)
  shippingAddress   Address       @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address?      @relation("BillingAddress", fields: [billingAddressId], references: [id])
  trackingNumber    String?
  estimatedDelivery DateTime?
  notes             String?       @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  orderItems        OrderItem[]
  shippingAddressId Int
  billingAddressId  Int?

  @@index([userId])
  @@index([orderNumber])
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  subtotal  Decimal  @db.Decimal(10, 2)
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean @default(false)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@index([userId])
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int?
  comment    String?  @db.Text
  images     String[] // Photos from customers
  isApproved Boolean  @default(false)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Favorite {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model CartItem {
  id       Int     @id @default(autoincrement())
  quantity Int     @default(1)
  size     String?
  color    String?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId, size, color])
  @@index([userId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
  RETURNED
}

enum PaymentMethod {
  COD
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum Role {
  ADMIN
  EDITOR
  CUSTOMER // Changed from USER to be more specific
}
